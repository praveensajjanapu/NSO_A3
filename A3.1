#!/usr/bin/python3

import easysnmp    
from easysnmp import snmp_get, snmp_walk, Session
import sys
import time
import math

agent_details = sys.argv[1]
info = agent_details.split(':')
agent_ip = info[0]
agent_port = info[1]
agent_comm = info[2]
frequency = float(sys.argv[2])
samples_count = int(sys.argv[3])
sample_time = 1/frequency
snmp_oids = []
previous_oid=[]
current_oid=[]

update_clock=""
timer1=0

for i in range(4,len(sys.argv)):
	snmp_oids.append(sys.argv[i])
	
snmp_oids.insert(0,'1.3.6.1.2.1.1.3.0')


def getter():
	global previous_oid, timer1, update_clock, current_oid
	
	if output[j].value!='NOSUCHOBJECT' and output[j].value!='NOSUCHINSTANCE':
		current_oid.append(int(output[j].value))
		if count!=0 and len(previous_oid)>0:
			delta_value = int((current_oid[j-1])) - int((previous_oid[j-1]))
			#print(delta_value)
			diff_time = ((k) - (timer1))
			#print(diff_time)
			rate = int((delta_value)/(diff_time))
			if rate < 0:
				if output[j].snmp_type == 'COUNTER32':
					delta_value = delta_value + (2**32)
					try:
						if update_clock==str(timer2):
							print(str((delta_value/diff_time)),end="|")
							update_clock=str(timer2)
						elif update_clock=="":
							print(str(timer2) +"|"+ str(round(delta_value/diff_time)),end="|");update_clock=str(timer2)
						else:
							print(str(timer2) +"|"+ str(round(delta_value/diff_time)),end="|");update_clock=str(timer2)

					except:
						print(str(timer2) +"|"+ str(round(delta_value/diff_time)), end= "|");update_clock=str(timer2)

				elif output[j].snmp_type == 'COUNTER64':
					delta_value=delta_value+2**64					
					try:
						if update_clock==str(timer2):
							print(str(delta_value/diff_time), end ="|")
							update_clock=str(timer2)
						elif update_clock=="":
							print(str(timer2) +"|"+ str(round(delta_value/diff_time)), end="|");update_clock=str(timer2)
						else:
							print(str(timer2)+ "|"+ str(round(delta_value/diff_time)) ,end="|");update_clock=str(timer2)
					except:
						print(str(timer2)+ "|"+ str(round(odelta_value/diff_time)),end= "|");update_clock=str(timer2)

			else:	
				try:
					if update_clock==str(timer2):
						print(str(rate),end= "|")
						update_clock=str(timer2)
					elif update_clock=="":
						print(str(timer2) +"|"+str(round(rate)),end="|")
						update_clock=str(timer2)
					else:
						print(str(timer2) +"|"+str(round(rate)),end="|") 
						update_clock=str(timer2)
				except:
					print(str(timer2) +"|"+ str(round(rate)), end = "|")  
					update_clock=str(timer2)	

			

if samples_count==-1:
	session=Session(hostname=agent_ip,remote_port=agent_port,community=agent_comm,version=2,timeout=0.1,retries=10)
	count = 0
	previous_oid = []
	while True:
		timer2=float(time.time())
		output = session.get(snmp_oids)
		k=float(output[0].value)/100
		current_oid = []
		j=1
		if count>0:
			if k<timer1:
				print("system restarted")
				continue
		while j<len(output):
			m=output[j].snmp_type
			if m =='COUNTER' or m == 'COUNTER64' or m == 'COUNTER32':
				getter()
			
			j=j+1
		previous_oid=current_oid
		timer1 = k
		if count!=0:
			print(end="\n")
		q=float(time.time())
		count=count+1
		f=q - timer2
		if f>sample_time:
			n=math.ceil(f/sample_time)
			l=(timer2+(n*sample_time))
			while time.time()<l:
				pass
		else:
			l=timer2+sample_time
			while time.time()<l :
				pass
else:
	session=Session(hostname=agent_ip,remote_port=agent_port, community=agent_comm ,version=2,timeout=0.1,retries=10)
	previous_oid = []
	for count in range(0,samples_count+1):
		timer2=float(time.time())
		output = session.get(snmp_oids)
		k=int(output[0].value)/100		
		current_oid = []
		j=1
		if count>0:
			if k<timer1:
				print("system restarted")
				break
		while j<len(output):
			m=output[j].snmp_type
			if m =='COUNTER' or m == 'COUNTER64' or m == 'COUNTER32':
				getter()
			j=j+1
		previous_oid=current_oid
		timer1 = k
		if count!=0:
			print(end="\n")
		q=float(time.time())
		f=q - timer2
		if f>sample_time:
			n=math.ceil(f/sample_time)
			l=(timer2+(n*sample_time))
			while time.time()<l:
				pass
		else:
			l=timer2+sample_time
			while time.time()<l :
				pass
 
